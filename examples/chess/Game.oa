# Game.oa
# =======

use oa.Matrix

trait Char {
	let as Piece
}

trait Square | $Coordinate {
	let as | $Char = $Piece map (_ as $Char) or ' '
}

use Chessboard => $Matrix [$Piece + $Void] size == (8, 8)

trait Chessboard: $Convert [$String] = {
	let from | $Fen = {
	}
	}

trait Game = {
	use Chessboard => $Matrix [$Piece + $Void] size == (8, 8)

	let chessboard: $Chessboard = $Chessboard from ($Fen ...)
	let white: $Player
	let black: $Player
	let player-to-move: $WHITE+$BLACK = $WHITE
	let history: $History
	let result: $Future [$Result]

	let result: $Future [$Result]

	let setup = $rewind @0

	let attempt-move | move: $Move = {
		if ($legal-moves contains $move) {
		} else {

		}
	}

	let rewind = {
		$History scan-l ()
	}

	let after | move: $Move
	          |: $legal-moves contains $move = {
		if $move is-castling {
			$players-allowed-to-castle

			$player-to-move
		} else {
			$board [$move 0] = ()
			$board [$move 1] = $move piece }}}

trait Board: $Format = {
	let show = {

	} }

trait Move = $Coordinate => $Coordinate
           | $Castling
		   | $Promotion = {
		   }

trait Move: $From[$String] = {

}

trait Chess-Notation: $Convert [$String, $Move] | $Game

trait Algebraic: $Chess-Notation {
	let as | $String = {
	}
}

trait Descriptive: $Chess-Notation {
	let as | $String = {
		$Chessboard @ ($Move destination) piece!
	}

	let from | $String = {
	}}

trait Figurine: $Chess-Notation {
	let as | $String = {
	}

trait Standard: $Chess-Notation {
	let as | $String = {
	}

	let from | $Move = {
	}}

trait Custom: $Chess-Notation = {
}

trait Promotion: $Move {
	trait piece = $Rook
	            | $Knight
				| $Bishop
				| $Queen
}

trait History {
	let moves: $Coordinate => $Coordinate = ()

	let number-of-moves-without-capture-or-pawn-move = {
		$rewind-board reverse }

	let rewind-board = $Game board fold ($Game, _ after _)
}

trait Game ( board: $Board
           , history: $History
		   , white: $Player
		   , black: $Player )

trait Clock {
	let delay: $Duration
	let increment: $Duration

	let press = {  }}

: $Clock {
	let delay
	}

trait Clock

trait Player {
	let clock: $Clock

	let is-allowed-to-castle = $Game moves by $Player contains (
		_ piece: $King
	)

	let move: $Move

	let accept-draw: $Bool

	let offer-draw

	let resign
}

trait Move = (
	offer-draw = $Bool,
)


crate Game {
	let from
}

trait Result = {
	let score = 'Win | 'Lose | 'Draw
	let cause = }

trait Cause = 'Resignation
            | 'Checkmate
			| 'Unknown

trait Evaluation | $Game {

}
